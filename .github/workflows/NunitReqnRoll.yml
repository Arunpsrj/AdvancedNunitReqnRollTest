# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Run .NET Selenium Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Debug

      - name: Set output path
        id: set_output
        run: echo "build_path=${{ github.workspace }}" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: 'Kundrakudi@95'
          ACCEPT_EULA: 'Y'
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install SQL Server Command Line Tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Wait for SQL Server to be ready
        run: sleep 15

      - name: Create & Seed DB
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Kundrakudi@95' -Q "CREATE DATABASE CTMQA"
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Kundrakudi@95' -d CTMQA -i scripts/sql/init.sql
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Kundrakudi@95' -d CTMQA -i scripts/sql/data.sql

      - name: Install Allure CLI (portable)
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -zxvf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Build project
        run: dotnet build --configuration Debug

      - name: Run NUnit Tests with Allure
        run: |
          dotnet test --no-build --logger:"trx;LogFileName=test_results.trx" --results-directory "TestResults" --verbosity normal
        continue-on-error: true
        
      - name: Generate Allure Results
        run: |
          allure generate TestResults --clean -o allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: AllureReport
          path: allure-report
          retention-days: 30

      - name: Upload Allure Results (Raw)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: AllureResults
          path: TestResults
          retention-days: 30

  deploy:
    name: Deploy Allure Report to GitHub Pages
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Allure Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: AllureReport
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
