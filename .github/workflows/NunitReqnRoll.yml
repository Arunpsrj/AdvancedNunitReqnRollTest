name: Run .NET Selenium Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Debug

      - name: Generate test chunks
        run: |
          mkdir -p test_chunks
          dotnet test --list-tests --no-build > all_tests.txt || true
          grep -E "^[A-Za-z0-9_.]+$" all_tests.txt > clean_tests.txt
          split -n l/4 clean_tests.txt test_chunks/chunk_
          mv test_chunks/chunk_aa test_chunks/tests_1.txt
          mv test_chunks/chunk_ab test_chunks/tests_2.txt
          mv test_chunks/chunk_ac test_chunks/tests_3.txt
          mv test_chunks/chunk_ad test_chunks/tests_4.txt
        shell: bash

      - name: Upload test chunks
        uses: actions/upload-artifact@v4
        with:
          name: test_chunks
          path: test_chunks/

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        chunk: [1, 2, 3, 4]

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: 'Kundrakudi@95'
          ACCEPT_EULA: 'Y'
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install SQL Server Command Line Tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Wait for SQL Server to be ready
        run: sleep 15

      - name: Create & Seed DB
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Kundrakudi@95' -Q "CREATE DATABASE CTMQA"
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Kundrakudi@95' -d CTMQA -i scripts/sql/init.sql
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Kundrakudi@95' -d CTMQA -i scripts/sql/data.sql

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -zxvf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Download test chunks
        uses: actions/download-artifact@v4
        with:
          name: test_chunks
          path: test_chunks/

      - name: Run specific chunk
        run: |
          chunk_file="test_chunks/tests_${{ matrix.chunk }}.txt"
          echo "Running tests from: $chunk_file"
          if [ -s "$chunk_file" ]; then
            filter_expr=$(paste -sd'|' "$chunk_file")
            dotnet test --no-build \
              --filter "FullyQualifiedName~${filter_expr}" \
              --logger:"trx;LogFileName=test_results.trx" \
              --results-directory "TestResults"
          else
            echo "No tests found for this chunk."
          fi
        continue-on-error: true

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.chunk }}
          path: TestResults/

  merge-allure:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          path: merged-allure

      - name: Merge allure results
        run: |
          mkdir -p final-allure-results
          cp -r merged-allure/allure-results-*/* final-allure-results/ || true

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -zxvf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Generate Allure report
        run: allure generate final-allure-results --clean -o allure-report

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: AllureReport
          path: allure-report

  deploy:
    name: Deploy Allure Report to GitHub Pages
    needs: merge-allure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Allure Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: AllureReport
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
