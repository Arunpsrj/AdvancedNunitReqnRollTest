// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace AdvancedReqnRollTest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CTM Order functionalities")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class CTMOrderFunctionalitiesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "CTM Order functionalities", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Orders.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
    #line hidden
#line 4
        await testRunner.GivenAsync("the \"default\" user logged into \"default\" site", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new per diem order")]
        [NUnit.Framework.CategoryAttribute("criticalPath")]
        [NUnit.Framework.CategoryAttribute("Arun")]
        public async global::System.Threading.Tasks.Task CreateANewPerDiemOrder()
        {
            string[] tagsOfScenario = new string[] {
                    "criticalPath",
                    "Arun"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new per diem order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "firstname",
                            "<unique_text>"});
                table2.AddRow(new string[] {
                            "lastname",
                            "<unique_text>"});
                table2.AddRow(new string[] {
                            "status",
                            "Active"});
                table2.AddRow(new string[] {
                            "homeRegion",
                            "JasonTest"});
                table2.AddRow(new string[] {
                            "certification",
                            "RN"});
                table2.AddRow(new string[] {
                            "speciality",
                            "ER"});
                table2.AddRow(new string[] {
                            "address",
                            "16801 Addison Road"});
                table2.AddRow(new string[] {
                            "city",
                            "Addison"});
                table2.AddRow(new string[] {
                            "state",
                            "TX"});
                table2.AddRow(new string[] {
                            "zip",
                            "75001"});
#line 8
        await testRunner.GivenAsync("the user creates new \'temp\' with following details", ((string)(null)), table2, "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "clientname",
                            "<unique_text>"});
                table3.AddRow(new string[] {
                            "status",
                            "Active"});
                table3.AddRow(new string[] {
                            "region",
                            "JasonTest"});
                table3.AddRow(new string[] {
                            "address",
                            "6575 West Loop South"});
                table3.AddRow(new string[] {
                            "city",
                            "Bellaire"});
                table3.AddRow(new string[] {
                            "state",
                            "TX"});
                table3.AddRow(new string[] {
                            "zip",
                            "77401"});
#line 20
       await testRunner.GivenAsync("the user creates new \'client\' with following details", ((string)(null)), table3, "Given ");
#line hidden
#line 29
       await testRunner.GivenAsync("the user opens \'/ordermanager-legacy.cfm\' url page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
       await testRunner.AndAsync("the user clicks \'New Order link\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
       await testRunner.GivenAsync("the user navigate to \'popup\' window", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Clientname",
                            "<scenario_client_clientName>"});
                table4.AddRow(new string[] {
                            "Tempname",
                            "<scenario_temp_lastName>"});
                table4.AddRow(new string[] {
                            "BookingRegion",
                            "JasonTest"});
                table4.AddRow(new string[] {
                            "StartDate",
                            "<getDate+1>"});
                table4.AddRow(new string[] {
                            "certification",
                            "RN"});
                table4.AddRow(new string[] {
                            "speciality",
                            "ER"});
                table4.AddRow(new string[] {
                            "ShiftId",
                            "7A-3P (1)"});
#line 32
       await testRunner.GivenAsync("the user creates new \'order\' with following details", ((string)(null)), table4, "Given ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get order using ClearConnect method")]
        [NUnit.Framework.CategoryAttribute("criticalPath")]
        [NUnit.Framework.CategoryAttribute("Arun")]
        public async global::System.Threading.Tasks.Task GetOrderUsingClearConnectMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "criticalPath",
                    "Arun"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get order using ClearConnect method", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "firstname",
                            "<unique_text>"});
                table5.AddRow(new string[] {
                            "lastname",
                            "<unique_text>"});
                table5.AddRow(new string[] {
                            "status",
                            "Active"});
                table5.AddRow(new string[] {
                            "homeRegion",
                            "JasonTest"});
                table5.AddRow(new string[] {
                            "certification",
                            "RN"});
                table5.AddRow(new string[] {
                            "speciality",
                            "ER"});
                table5.AddRow(new string[] {
                            "address",
                            "16801 Addison Road"});
                table5.AddRow(new string[] {
                            "city",
                            "Addison"});
                table5.AddRow(new string[] {
                            "state",
                            "TX"});
                table5.AddRow(new string[] {
                            "zip",
                            "75001"});
#line 44
        await testRunner.GivenAsync("the user creates new \'temp\' with following details", ((string)(null)), table5, "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "clientname",
                            "<unique_text>"});
                table6.AddRow(new string[] {
                            "status",
                            "Active"});
                table6.AddRow(new string[] {
                            "region",
                            "JasonTest"});
                table6.AddRow(new string[] {
                            "address",
                            "6575 West Loop South"});
                table6.AddRow(new string[] {
                            "city",
                            "Bellaire"});
                table6.AddRow(new string[] {
                            "state",
                            "TX"});
                table6.AddRow(new string[] {
                            "zip",
                            "77401"});
#line 56
        await testRunner.GivenAsync("the user creates new \'client\' with following details", ((string)(null)), table6, "Given ");
#line hidden
#line 65
        await testRunner.GivenAsync("the user opens \'/ordermanager-legacy.cfm\' url page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
        await testRunner.AndAsync("the user clicks \'New Order link\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
        await testRunner.GivenAsync("the user navigate to \'popup\' window", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Clientname",
                            "<scenario_client_clientName>"});
                table7.AddRow(new string[] {
                            "Tempname",
                            "<scenario_temp_lastName>"});
                table7.AddRow(new string[] {
                            "BookingRegion",
                            "JasonTest"});
                table7.AddRow(new string[] {
                            "StartDate",
                            "<getDate+1>"});
                table7.AddRow(new string[] {
                            "certification",
                            "RN"});
                table7.AddRow(new string[] {
                            "speciality",
                            "ER"});
                table7.AddRow(new string[] {
                            "ShiftId",
                            "7A-3P (1)"});
#line 68
        await testRunner.GivenAsync("the user creates new \'order\' with following details", ((string)(null)), table7, "Given ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "orderId",
                            "<scenario_order_orderId>"});
#line 77
        await testRunner.GivenAsync("a \"REST\" request sent for \"getOrders\" to the \"default\" site with the following ar" +
                        "guments", ((string)(null)), table8, "Given ");
#line hidden
#line 80
        await testRunner.ThenAsync("the web response should contain \"status\" with value \"filled\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
